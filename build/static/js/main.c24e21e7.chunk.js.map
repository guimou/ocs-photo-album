{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","checkMimeType","event","files","target","err","types","x","every","type","length","z","toast","error","value","maxSelectFile","warn","checkFileSize","size","onChangeHandler","setState","selectedFile","loaded","onClickHandler","data","FormData","state","append","axios","post","onUploadProgress","ProgressEvent","total","then","res","success","catch","console","log","slides","uid","stored_uid","localStorage","getItem","uuidv4","setItem","this","identifyUser","imagesList","get","updateSlides","Container","className","Row","Col","xs","Form","FormGroup","Label","Control","multiple","onChange","ProgressBar","max","color","Math","round","Button","onClick","Carousel","map","slide","index","link","Item","Image","key","src","rounded","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.c24e21e7.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport axios from 'axios';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Form from 'react-bootstrap/Form';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Button from 'react-bootstrap/Button';\nimport FormGroup from 'react-bootstrap/FormGroup';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Image from 'react-bootstrap/Image';\nimport Carousel from 'react-bootstrap/Carousel';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      loaded: 0,\n      slides: []\n    }\n  }\n\n  identifyUser() {\n    var uid ='';\n    let stored_uid = localStorage.getItem('ocsphotoid');\n    if (stored_uid && (stored_uid !== '')) {\n      uid = stored_uid;\n    } else {\n      uid = uuidv4()\n      localStorage.setItem('ocsphotoid', uid)\n    }\n    return uid\n  }\n\n\n  componentDidMount() {\n    this.identifyUser();\n    //this.loadImagesList();\n  }\n\n  updateSlides(imagesList) {\n    if (imagesList.length !== 0) {\n      this.setState({\n        slides: imagesList\n      });\n    }\n\n  }\n\n\n\n  loadImagesList() {\n    axios.get(\"/listimages\")\n      .then(res => {\n        console.log(res.data)\n        this.updateSlides(res.data)\n      })\n      .catch(err => { // then print response status\n        toast.error('cannot get images list...' + err)\n        console.log(err)\n      })\n  }\n\n  checkMimeType = (event) => {\n    //getting file object\n    let files = event.target.files\n    //define message container\n    let err = []\n    // list allow mime type\n    const types = ['image/png', 'image/jpeg', 'image/gif']\n    // loop access array\n    for (let x = 0; x < files.length; x++) {\n      // compare file type find doesn't matach\n      if (types.every(type => files[x].type !== type)) {\n        // create error message and assign to container   \n        err[x] = files[x].type + ' is not a supported format\\n';\n      }\n    };\n    for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n      // discard selected file\n      toast.error(err[z])\n      event.target.value = null\n    }\n    return true;\n  }\n\n  maxSelectFile = (event) => {\n    let files = event.target.files\n    if (files.length > 3) {\n      const msg = 'Only 3 images can be uploaded at a time'\n      event.target.value = null\n      toast.warn(msg)\n      return false;\n    }\n    return true;\n  }\n\n  checkFileSize = (event) => {\n    let files = event.target.files\n    let size = 2000000\n    let err = [];\n    for (var x = 0; x < files.length; x++) {\n      if (files[x].size > size) {\n        err[x] = files[x].type + 'is too large, please pick a smaller file\\n';\n      }\n    };\n    for (var z = 0; z < err.length; z++) {// if message not same old that mean has error \n      // discard selected file\n      toast.error(err[z])\n      event.target.value = null\n    }\n    return true;\n  }\n\n  onChangeHandler = event => {\n    var files = event.target.files\n    if (this.maxSelectFile(event) && this.checkMimeType(event) && this.checkFileSize(event)) {\n      // if return true allow to setState\n      this.setState({\n        selectedFile: files,\n        loaded: 0\n      })\n    }\n  }\n\n  onClickHandler = () => {\n    const data = new FormData()\n    if (this.state.selectedFile !== null) {\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append('file', this.state.selectedFile[x])\n      }\n      axios.post(\"/upload\", data, {\n        onUploadProgress: ProgressEvent => {\n          this.setState({\n            loaded: (ProgressEvent.loaded / ProgressEvent.total * 100),\n          })\n        },\n      })\n        .then(res => { // then print response status\n          toast.success('upload success')\n        })\n        .catch(err => { // then print response status\n          toast.error('upload fail')\n          console.log(err)\n        })\n    } else {\n      toast.warn('Select a file first...')\n    }\n\n  }\n\n  render() {\n    return (\n      <Container className=\"background\">\n        <Row>\n          <Col xs={8}><h2>Welcome to your Photo Album!</h2>\n            <p>\n              The first time you upload a picture (png, jpg, gif, less than 2MB), a dedicated bucket will be created for you, and the images will be stored there.\n              When you reconnect, you'll be automatically linked to this bucket, and you can continue to upload pictures.<br />\n              This basic \"authentication\" works with a cookie, so if you clear it, you'll simply loose access. In a real application, an authentication mechanism would allow for proper reconnection.<br />\n              The buckets and their content are automatically deleted after 24 hours.\n            </p></Col>\n          <Col><Form>\n            <FormGroup>\n              <Form.Label>Upload Your File </Form.Label>\n              <Form.Control type=\"file\" multiple onChange={this.onChangeHandler}></Form.Control>\n            </FormGroup>\n            <ToastContainer />\n            <FormGroup>\n              <ProgressBar max=\"100\" color=\"success\" value={this.state.loaded} >{Math.round(this.state.loaded, 2)}%</ProgressBar>\n            </FormGroup>\n            <Button type=\"button\" className=\"btn btn-success btn-block\" onClick={this.onClickHandler}>Upload</Button>\n          </Form></Col>\n        </Row>\n        <Row>\n          <Col>&nbsp;</Col>\n        </Row>\n        <Row>\n          <Col></Col>\n          <Col xs={10}>\n            <h2>And here are your pictures!</h2>\n            <Carousel>\n              {this.state.slides.map(function (slide, index) {\n                var link = \"/image/\" + slide\n                return (\n                  <Carousel.Item>\n                    <Image key={index} className=\"d-block w-50\" src={link} rounded />\n                  </Carousel.Item>\n                );\n              })}\n            </Carousel>\n          </Col>\n          <Col></Col>\n        </Row>\n      </Container>\n\n\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}